from .. import db, pay, keyboards, states, config
from ..utils import misc as utils
from ..bot import bot, dp
from .start import start

from html import escape
from random import choice
from asyncio import sleep

from aiogram import types
from aiogram.dispatcher import FSMContext


@dp.callback_query_handler(text="deposit")
async def call_deposit(call: types.CallbackQuery):
    await states.Deposit.waiting_for_amount.set()
    await call.message.edit_text(
        f"üíé –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è. (<b><i>–º–∏–Ω–∏–º—É–º</i></b> <b>{config.DEPOSIT_MINIMUM} WAV</b>)",
        reply_markup=await keyboards.deposit(),
    )


@dp.message_handler(state=states.Deposit.waiting_for_amount)
async def state_deposit(message: types.Message, state: FSMContext):
    await state.finish()

    if ("." in message.text) or ("," in message.text):
        await message.answer("–ü–æ–∫–∞-—á—Ç–æ –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ —Ü–µ–ª—ã–µ —á–∏—Å–ª—ã!")
        return await start(message)

    try:
        amount = int(message.text)
    except ValueError:
        await message.answer("–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ!")
        return await start(message)

    user_data = await db.users_db.get_user(message.from_user.id)
    overall_balance = await pay.stupidwallet_pay.get_balance()

    if (amount < config.DEPOSIT_MINIMUM) or (amount > config.DEPOSIT_MAXIMUM):
        await message.answer(
            f"–°—É–º–º–∞ –Ω–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ <b><i>–æ—Ç {int(config.DEPOSIT_MINIMUM)} –¥–æ {int(config.DEPOSIT_MAXIMUM)}</i> WAV</b>!"
        )
        return await start(message)

    timer = 59

    msg = await message.answer("üíé " + choice(utils.HINTS))

    invoice = await pay.stupidwallet_pay.sw.create_invoice(
        pay.stupidwalletapi.WAV_COIN,
        amount,
        1,
        f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤ @{config.BOT_NAME}. –ü–æ–≥–ª–∞–¥—å—Ç–µ –°–≤—è—Ç–æ—à–∞.",
        f"https://t.me/{config.BOT_NAME}"
    )

    while timer > 0:
        invoice_data = await pay.stupidwallet_pay.sw.get_invoice_data(invoice.id)
        if len(invoice_data.pay_history) > 0:
            await db.users_db.exec_and_commit(
                """UPDATE users SET balance = balance + ? WHERE id = ?;""",
                (amount, message.from_id)
            )

            await msg.edit_text("üíé –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω!", reply_markup=await keyboards.deposit_end())

            await bot.send_message(
                config.ADMIN,
                (
                    f"üîî –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç <b>{escape(message.from_user.first_name)}</b> (<code>{message.from_user.id}</code>)"
                    f" –Ω–∞ —Å—É–º–º—É <b>{amount} WAV</b> (–ë—ã–ª–æ –≤—Å–µ–≥–æ: <b>{user_data[1]} WAV</b>)"
                    f"\n–¢–µ–ø–µ—Ä—å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ StupidWallet: <b>{overall_balance + amount} WAV</b> (–ë—ã–ª–æ –≤—Å–µ–≥–æ: <b>{overall_balance} WAV</b>)"
                ),
            )

            return

        await msg.edit_text(f'<a href="https://t.me/stupidwallet_bot?start={invoice.id}">–û–ø–ª–∞—Ç–∏—Ç–µ —Å—á–µ—Ç.</a>\n–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã... (–û—Å—Ç–∞–ª–æ—Å—å {timer} —Å–µ–∫.)')

        timer -= 3
        await sleep(3)

    await msg.edit_text("üíé –í—ã –Ω–µ —É—Å–ø–µ–ª–∏!", reply_markup=await keyboards.deposit_end())
    return await start(message)


@dp.callback_query_handler(text="withdraw")
async def call_withdraw(call: types.CallbackQuery):
    withdraw_maximum = int(min([int(config.WITHDRAW_MAXIMUM), (await pay.stupidwallet_pay.get_balance()) / 2]))

    if (await db.users_db.get_balance(call.from_user.id)) > config.WITHDRAW_MINIMUM:
        await states.Withdraw.waiting_for_amount.set()
        await call.message.edit_text(
            f"üíé –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞ –≤ <b>WAV</b>\n\n–ú–∞–∫—Å–∏–º—É–º: <b>{withdraw_maximum} WAV</b>\n–ú–∏–Ω–∏–º—É–º: <b>{config.WITHDRAW_MINIMUM} WAV</b>",
            reply_markup=await keyboards.withdraw(),
        )
    else:
        await call.message.edit_text(
            "‚ö†Ô∏è –ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ WAV –¥–ª—è –≤—ã–≤–æ–¥–∞!",
            reply_markup=await keyboards.withdraw(),
        )


@dp.message_handler(state=states.Withdraw.waiting_for_amount)
async def state_withdraw(message: types.Message, state: FSMContext):
    await state.finish()

    if ("." in message.text) or ("," in message.text):
        await message.answer("–ü–æ–∫–∞-—á—Ç–æ –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ —Ü–µ–ª—ã–µ —á–∏—Å–ª—ã!")
        return await start(message)

    try:
        amount = int(message.text)
    except ValueError:
        await message.answer("–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ!")
        return await start(message)

    if amount < config.WITHDRAW_MINIMUM:
        await message.answer(f"–°–µ–π—á–∞—Å –º–∏–Ω–∏–º—É–º –¥–ª—è –≤—ã–≤–æ–¥–∞: <b>{config.WITHDRAW_MINIMUM} WAV</b>!")
        return await start(message)

    overall_balance = await pay.stupidwallet_pay.get_balance()
    withdraw_maximum = min([int(config.WITHDRAW_MAXIMUM), overall_balance / 2])

    if amount > withdraw_maximum:
        await message.answer(f"–°–µ–π—á–∞—Å –º–∞–∫—Å–∏–º—É–º –¥–ª—è –≤—ã–≤–æ–¥–∞: <b>{withdraw_maximum} WAV</b>!")
        return await start(message)

    user_data = await db.users_db.get_user(message.from_user.id)

    if user_data[1] < amount:
        await message.answer(f"–í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç <b>{round(amount - user_data[1], 4)} WAV</b>!")
        return await start(message)

    await start(message)

    cheque = await pay.stupidwallet_pay.withdraw(message.from_user.id, int(amount))
    await message.answer(f"https://t.me/stupidwallet_bot?start={cheque.id}")

    await bot.send_message(
        config.ADMIN,
        (
            f"üîî –í—ã–≤–æ–¥ –æ—Ç <b>{escape(message.from_user.first_name)}</b> (<code>{message.from_user.id}</code>)"
            f" –Ω–∞ —Å—É–º–º—É <b>{amount} WAV</b> (–ë—ã–ª–æ –≤—Å–µ–≥–æ: <b>{user_data[1]} WAV</b>)"
            f"\n–¢–µ–ø–µ—Ä—å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ StupidWallet: <b>{overall_balance - amount} WAV</b> (–ë—ã–ª–æ –≤—Å–µ–≥–æ: <b>{overall_balance} WAV</b>)"
        ),
    )
